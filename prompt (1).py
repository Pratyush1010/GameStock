# -*- coding: utf-8 -*-
"""Prompt.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1yUA72UPedf_kOcJHqBqZmWpIR20-WvOU
"""

!pip install openai

import openai

# Load your API key from environment variables
api_key = "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"

# Initialize the OpenAI client
openai.api_key = api_key

# Create a function to interact with the ChatGPT API
def chat_with_bot(prompt):
    response = openai.Completion.create(
        engine="text-davinci-002",
        prompt=prompt,
        max_tokens=50,  # Adjust as needed
    )
    return response.choices[0].text

# Main loop
while True:
    user_input = input("You: ")
    if user_input.lower() == "exit":
        break
    response = chat_with_bot(user_input)
    print("Bot:", response)

#GET PROMPT

import openai


# Create a function to interact with the ChatGPT API
def chat_with_bot(prompt):
    response = openai.Completion.create(
        engine="text-davinci-002",
        prompt=prompt,
        max_tokens=50,  # Adjust as needed
    )
    return response.choices[0].text

# Create a function to get the prompt
def getPrompt(param):
    prompt = f"explain {param} to me in a concise and easy-to-understand way"
    prompt = getPrompt(user_input)
    response = chat_with_bot(prompt)
    print(f"Bot: {response}")

#GET ANSWER
!pip install streamlit
import openai
import streamlit as st

# Load your OpenAI API key from environment variables
api_key = "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"

# Initialize the OpenAI client
openai.api_key = api_key

# Define the function to answer questions
def getAnswers(question):
    prompt = f"answer the following question in a concise and easy-to-understand way, keeping the response within 100 words: {question}"
    return prompt

# Initialize variables
conversation = []  # Store the conversation history

# Streamlit application
st.title("Chat with ChatGPT")

# Input field for user questions
user_question = st.text_input("Ask your question:")

# Generate a prompt using getAnswers
prompt = getAnswers(user_question)

# Send the prompt to the chatbot and get the response
response = chat_with_bot(prompt)

# Add the conversation turn to the history
conversation.append({"user": user_question, "bot": response})

# Display the conversation
for turn in conversation:
    st.markdown(f"{turn['user']} > {turn['bot']}")

# Clear the input field after each question
st.empty()

#BACKUP CODE FOR THE BUTTONS

mport openai
import streamlit as st

# Load your OpenAI API key from environment variables
api_key = "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"

# Initialize the OpenAI client
openai.api_key = api_key

# Define the function to interact with ChatGPT
def chat_with_bot(prompt):
    response = openai.Completion.create(
        engine="text-davinci-002",
        prompt=prompt,
        max_tokens=100,  # Adjust as needed
    )
    return response.choices[0].text

# Define the function to generate prompts
def getPrompt(param):
    prompt = f"explain {param} to me without using any scary financial jargon"
    return prompt

# Initialize variables
conversation = []  # Store the conversation history
selected_metric = None  # Keep track of the selected metric

# Streamlit application
st.title("Chat with ChatGPT")

# Display a selection of financial metrics
metric_options = ["Market Capitalization", "Price-to-Earnings Ratio (P/E)", "Dividend Yield"]
selected_metric = st.selectbox("Select a metric to learn about:", metric_options)

# Button to generate a prompt based on the selected metric
generate_prompt_button = st.button("Generate Prompt")

# Generate a prompt and send it to ChatGPT if the button is clicked
if generate_prompt_button:
    prompt = getPrompt(selected_metric)
    response = chat_with_bot(prompt)

    # Add the conversation turn to the history
    conversation.append({"user": prompt, "bot": response})

# Display the conversation
for turn in conversation:
    st.markdown(f"{turn['user']} > {turn['bot']}")

# Clear the input field after each question
st.empty()